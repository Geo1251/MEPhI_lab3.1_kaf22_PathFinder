1.Техническое задание на разработку программного обеспечения

2.Цель проекта: Написать программу на C++ для сравнения различных алгоритмов поиска. Сравнение
алгоритмов должно производиться на одной из приведенных задач, связанных с обработкой
информации.

3.Основные компоненты:

3.1. Класс LRUCache: реализация кэша с политикой вытеснения LRU.

3.2. Класс SequenceFinder: поиск часто встречающихся подпоследовательностей в бинарном дереве.

3.3. Класс Stream: обертка над std::vector для работы с потоками данных.

3.4. Класс BinaryTree: реализация бинарного дерева.

3.5. Класс Person: класс для работы с данными о человеке.

3.6. Дополнительные классы:

3.6.1. Класс AlphabeticalIndexer: Этот класс предназначен для создания алфавитного указателя из текста. 
Указатель представляет собой карту, где ключ - это слово, а значение - это множество номеров страниц, 
на которых это слово встречается. Конструктор класса принимает два параметра: размер страницы и флаг автоматического 
индексирования. Метод createIndex принимает текст и создает алфавитный указатель, разбивая текст на слова и отслеживая,
на какой странице каждое слово встречается впервые.

3.6.2. Интерфейс ISetAlphabet: Этот интерфейс определяет общий интерфейс для множества, 
используемого в AlphabeticalIndexer. Он должен содержать метод insert, который принимает строку и добавляет ее в множество.

3.6.3. Класс SmartPointer: Этот класс представляет собой реализацию умного указателя, 
который автоматически управляет жизненным циклом объекта, на который он указывает. 
Умный указатель автоматически удаляет объект, когда больше нет ссылок на него. 
Это помогает предотвратить утечки памяти и делает код более безопасным и удобным для чтения.

4.Тестирование:

4.1. Разработка набора модульных тестов для проверки корректности реализации каждого из классов. 
Тесты должны покрывать все основные функциональные аспекты каждого класса.

4.2. Тесты для LRUCache должны проверять, что кэш корректно добавляет элементы, 
извлекает их и корректно обрабатывает ситуацию, когда кэш заполнен и требуется 
вытеснение элементов. В тестах должно проверяться как автоматическое добавление 
элементов в кэш, так и ручное добавление пользователем.

4.3. Тесты для SequenceFinder должны проверять, что класс корректно находит часто 
встречающиеся подпоследовательности в бинарном дереве. Проверяется как автоматическое 
создание дерева и поиск подпоследовательностей, так и ручное создание дерева пользователем 
и поиск подпоследовательностей.

4.4. Добавить тест TestAlphabeticalIndexerAuto, который автоматически тестирует 
индексирование предопределенного текста. Тест должен создавать индекс для текста 
и затем проверять, что индекс содержит правильные страницы для каждого слова. 
Если страницы не совпадают с ожидаемыми, тест выводит сообщение об ошибке. 
В конце теста все созданные объекты удаляются.

4.5. Добавить тест TestAlphabeticalIndexerManual, который позволяет пользователю 
ввести свой текст и размер страницы, а затем создает индекс для этого текста. 
Пользователь может ввести слова для поиска, и тест выводит страницы, на которых 
эти слова встречаются. В конце теста все созданные объекты удаляются.

4.6. Добавить метод CompareAlgorithms, который сравнивает время выполнения 
различных тестов, включая TestAlphabeticalIndexerAuto. Метод должен выводить 
время выполнения каждого теста и общее время выполнения всех тестов.

4.7. Все тесты должны использовать утверждения (assert) для проверки корректности работы классов. 
Если какое-то утверждение не выполняется, это означает, что в классе есть ошибка, и тест завершается с ошибкой. 
Если все утверждения выполняются, тест считается пройденным.

5.Требования к производительности: Время выполнения каждого из тестов должно быть 
приемлемым и соответствовать ожидаемой сложности алгоритмов.

6.Технологии: Проект должен быть реализован на языке C++.